// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  MEMBER
  USER
}

model User {
 id              String @id @default(auto()) @map("_id") @db.ObjectId
 name            String
 firstName       String
 lastName        String
 email           String       @unique 
 isVerified      Boolean      @default(false)
 token           Int?
 emailVerified   DateTime?
 imageUrl        String? 
 password        String?
 projects        Project[]
 portfolioItems  PortfolioItem[]
 payments        Payment[]
 invoices        Invoice[]
 accounts        Account[]
 role            UserRole       @default(USER)
 status          Boolean        @default(true)
 createdAt       DateTime       @default(now())
 updatedAt       DateTime       @updatedAt

@@map("users")
 
}

model Category {
 id               String @id @default(auto()) @map("_id") @db.ObjectId
 title            String
 slug             String        @unique 
 imageUrl         String? 
 description      String?
 createdAt        DateTime       @default(now())
 updatedAt        DateTime       @updatedAt
}
// model Client {
//  id               String @id @default(auto()) @map("_id") @db.ObjectId
//  title            String
//  slug             String        @unique 
//  imageUrl         String? 
//  description      String?
//  projects         Project[]
//  createdAt        DateTime       @default(now())
//  updatedAt        DateTime       @updatedAt
// }


model Account {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 userId             String   @db.ObjectId
 type               String
 provider           String
 providerAccountId  String
 refresh_token      String?  @db.String
 access_token       String?  @db.String
 expires_at         Int?
 token_type         String?
 scope              String?
 id_token           String?  @db.String
 session_state      String?
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

model Module {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name               String
 project            Project @relation(fields: [projectId], references: [id])
 projectId          String   @db.ObjectId
 tasks              Task[]
 createdAt          DateTime @default(now())
 updatedAt          DateTime @updatedAt
}


model Project {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 name               String
 description        String?
 startDate          DateTime
 endDate            DateTime?
 modules            Module[]
 invoices           Invoice[]
 status             String
 clientId           String   @db.ObjectId
 user               User @relation(fields: [userId], references: [id])
 userId             String   @db.ObjectId
}


model Task {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 title              String
 description        String?
 status             String
 dueDate            DateTime?
 module             Module @relation(fields: [moduleId], references: [id])
 moduleId           String   @db.ObjectId
 createdAt          DateTime @default(now())
 updatedAt          DateTime @updatedAt
}

model Payment {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 amount             Float
 date               DateTime
 method             String
 user               User @relation(fields: [userId], references: [id])
 userId             String   @db.ObjectId
 
 
}

model Invoice {
id String @id @default(auto()) @map("_id") @db.ObjectId
 amount             Float
 invoiceNumber      String   @unique
 status             String
 date               DateTime
 dueDate            DateTime
 project            Project @relation(fields: [projectId], references: [id])
 projectId          String   @db.ObjectId
 user               User @relation(fields: [userId], references: [id])
 userId             String   @db.ObjectId
 createdAt          DateTime @default(now())
 updatedAt          DateTime @updatedAt
}

model PortfolioItem {
id String @id @default(auto()) @map("_id") @db.ObjectId
 title              String
 imageUrl           String? 
 projectUrl         String? 
 description        String
 date               DateTime
 dueDate            DateTime
 user               User @relation(fields: [userId], references: [id])
 userId             String   @db.ObjectId
 createdAt          DateTime @default(now())
 updatedAt          DateTime @updatedAt
}


